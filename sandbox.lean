
#check IO.rand
-- IO.rand (lo hi : Nat) : BaseIO Nat

#eval IO.rand 1 6
-- 4

#eval IO.rand 1 6
-- 2

-- `BaseIO` is the simplest IO monad of Lean. Actions of this type can have
-- side-effects in the real world but cannot fail.

#check BaseIO
-- BaseIO : Type â†’ Type

#print BaseIO
-- def BaseIO : Type â†’ Type := EIO Empty

#check EIO
-- EIO (Îµ : Type) : Type â†’ Type

#print EIO
-- def EIO : Type â†’ Type â†’ Type := fun Îµ => EStateM Îµ IO.RealWorld


#print IO.RealWorld
-- def IO.RealWorld : Type := Unit

-- EStateM is a combined state and exception monad.
#check EStateM
-- EStateM.{u} (Îµ Ïƒ Î± : Type u) : Type u

-- The state is of type Ïƒ and each action produces a. Every state transition
-- produces a new state and:
--   - either an ok result that boxes a value of type Î±
--   - or an error result that boxes an error info of type Îµ
#print EStateM.Result
-- inductive EStateM.Result.{u} : Type u â†’ Type u â†’ Type u â†’ Type u
-- number of parameters: 3
-- constructors:
-- EStateM.Result.ok : {Îµ Ïƒ Î± : Type u} â†’ Î± â†’ Ïƒ â†’ EStateM.Result Îµ Ïƒ Î±
-- EStateM.Result.error : {Îµ Ïƒ Î± : Type u} â†’ Îµ â†’ Ïƒ â†’ EStateM.Result Îµ Ïƒ Î±

-- For `BaseIO` actions,
--   - The state Ïƒ is IO.RealWorld defined as Unit. So there is no
--     associated state *managed by Lean* (the state is entirely external:
--     the info that you have changed on your hard drive, in the cloud, etc.)
--   - The error type is `Empty` which has no element: the action cannot fail.

#eval IO.println "Hello world!"
-- Hello world!

#check IO.println
-- {Î± : Type u_1} â†’ [ToString Î±] â†’ Î± â†’ IO Unit

-- The `IO` monad is probably more common. Actions of this type can have
-- side-effects in the real world and can fail.

#check IO
-- IO : Type -> Type

#print IO
-- @[reducible] def IO : Type â†’ Type := EIO IO.Error

-- There is a (long) list of possible errors, described by the `IO.Error` type.

#check IO.Error
-- IO.Error : Type

#print IO.Error
-- inductive IO.Error : Type
-- number of parameters: 0
-- constructors:
-- IO.Error.alreadyExists : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.otherError : UInt32 â†’ String â†’ IO.Error
-- IO.Error.resourceBusy : UInt32 â†’ String â†’ IO.Error
-- IO.Error.resourceVanished : UInt32 â†’ String â†’ IO.Error
-- IO.Error.unsupportedOperation : UInt32 â†’ String â†’ IO.Error
-- IO.Error.hardwareFault : UInt32 â†’ String â†’ IO.Error
-- IO.Error.unsatisfiedConstraints : UInt32 â†’ String â†’ IO.Error
-- IO.Error.illegalOperation : UInt32 â†’ String â†’ IO.Error
-- IO.Error.protocolError : UInt32 â†’ String â†’ IO.Error
-- IO.Error.timeExpired : UInt32 â†’ String â†’ IO.Error
-- IO.Error.interrupted : String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.noFileOrDirectory : String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.invalidArgument : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.permissionDenied : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.resourceExhausted : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.inappropriateType : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.noSuchThing : Option String â†’ UInt32 â†’ String â†’ IO.Error
-- IO.Error.unexpectedEof : IO.Error
-- IO.Error.userError : String â†’ IO.Error

def printlnOrPanic! {Î±} [ToString Î±] (a : Î±) : IO Unit := do
  try
    IO.println a
  catch error => -- catch every error
    panic! s!"ðŸ˜± {error}"

def printlnOrPanicIfPermissionDenied! {Î±} [ToString Î±] (a : Î±) : IO Unit := do
  try
    IO.println a
  catch e =>
    match e with
    | .permissionDenied _ _ _ => panic! s!"ðŸ”’ Permision denied"
    | _ => return -- This is fine.

def printlnOrPanicIfPermissionDenied!' {Î±} [ToString Î±] (a : Î±) : IO Unit := do
  try
    IO.println a
  catch
  | .permissionDenied _ _ _ => panic! s!"ðŸ”’ Permision denied"
  | _ => return -- This is fine.


-- Actions of type `BaseIO` are automatically promoted to the `IO` type
-- when needed.

def printDie : IO Unit := do
  let die <- IO.rand 1 6
  IO.println s!"ðŸŽ² {die}"

#eval printDie
-- ðŸŽ² 5
